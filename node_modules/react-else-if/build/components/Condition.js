"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _react = require("react");

var _react2 = _interopRequireDefault(_react);

var _propTypes = require("prop-types");

var _propTypes2 = _interopRequireDefault(_propTypes);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var Condition = function (_Component) {
  _inherits(Condition, _Component);

  function Condition() {
    _classCallCheck(this, Condition);

    return _possibleConstructorReturn(this, (Condition.__proto__ || Object.getPrototypeOf(Condition)).apply(this, arguments));
  }

  _createClass(Condition, [{
    key: "nextComponent",
    value: function nextComponent($components, $current) {
      var childrens = $components;
      return childrens[$current + 1] ? childrens[$current + 1] : null;
    }
  }, {
    key: "prevComponent",
    value: function prevComponent($components, $current) {
      var childrens = $components;
      return childrens[$current - 1] ? childrens[$current - 1] : null;
    }
  }, {
    key: "render",
    value: function render() {
      var _this2 = this;

      var childrens = _react2.default.Children.map(this.props.children, function (child) {
        return child;
      });
      var renderable = void 0;

      var myMap = new Map();
      childrens.forEach(function (child, key) {
        var current = myMap.get(child.type.name);
        var value = current === undefined ? 1 : current + 1;
        myMap.set(child.type.name, value);
      });

      if (myMap.get("If") > 1) {
        throw new Error("If should not appear " + myMap.get("If") + " times in Condition Block");
      }

      if (myMap.get("Else") > 1) {
        throw new Error("Else should not appear " + myMap.get("ElseIf") + " times in Condition Block");
      }

      childrens.forEach(function (child, key) {
        if (child.type.name === "Else") {
          var prev = _this2.prevComponent(childrens, key);
          var next = _this2.nextComponent(childrens, key);

          if (prev === null) {
            throw new Error("Else's previous condition should be If or ElseIf");
          }

          if (next !== null) {
            throw new Error("Else's should not have next condition");
          }
        }
        if (child.type.name === "If") {
          var _next = _this2.nextComponent(childrens, key);
          if (_next === "If") {
            throw new Error("If's next item must not be If in Condition Block");
          }
        } else if (child.type.name === "ElseIf") {
          var _next2 = _this2.nextComponent(childrens, key);
          if (_next2 === "If") {
            throw new Error("ElseIf's next item must not be If in Condition Block");
          }
        }
      });

      childrens.some(function (child) {
        if (child.props.is === true || child.props.is === 1 || child.type.name === "Else") {
          renderable = child;
          return true;
        }
        return false;
      });

      return _react2.default.createElement(
        "div",
        null,
        renderable
      );
    }
  }]);

  return Condition;
}(_react.Component);

exports.default = Condition;


Condition.propTypes = {
  children: _propTypes2.default.any.isRequired
};